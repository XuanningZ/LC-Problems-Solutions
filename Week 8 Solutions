416. Partition Equal Subset Sum
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        
        @functools.cache           
        def dfs(i, cusum):       
            if cusum == target:    
                return True
            if i == len(nums):   
                return False
            
            ans1 = dfs(i+1, cusum)

            ans2 = dfs(i+1, cusum + nums[i])
            
            return ans1 or ans2
        

        total = sum(nums)
        if total % 2 == 1:   
            return False
        
        target = total // 2
        if max(nums) > target: 
            return False

        return dfs(0, 0)      

322. Coin Change
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        @cache
        def dfs(i, c):
            if i < 0:
                return 0 if c == 0 else inf
            if c < coins[i]:
                return dfs(i - 1, c)
            return min(dfs(i - 1, c), dfs(i, c - coins[i]) + 1)
        ans = dfs(len(coins) - 1, amount)
        return ans if ans < inf else -1

53. Maximum Subarray
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        for i in range(1, len(nums)):
            nums[i] += max(nums[i - 1], 0)
        return max(nums)
